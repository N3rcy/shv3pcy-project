"""Crypto handler module for SysBmi_Bot

Contains handlers for text encoding and decoding functionality.

t.me/SysBmi_Bot
"""

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
import asyncio
from bot.utils.encoder import encode, decode

router = Router()

@router.message(Command("crypto"))
async def info_crypt(message: Message):
    """Handler for the /crypto command
    
    Provides information about encoding and decoding functionality
    """
    await message.reply(
        f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n<blockquote><code>/decode 00111001</code> -> —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞</blockquote>\n<blockquote><code>/encode Hello world</code> -> –∑–∞—à–∏—Ñ—Ä–æ–≤–∫–∞</blockquote>",
        parse_mode="html",
    )

@router.message(Command("decode"))
async def decode_cmd(message: Message):
    """Handler for the /decode command
    
    Decodes binary text to UTF-8 string
    """
    try:
        msg = await message.reply("üîí –ò–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–≤–æ–∏—á–Ω–æ–≥–æ –∫–æ–¥–∞..")
        await asyncio.sleep(2)
        message_text = str(message.text)
        message_parts = message_text.split(" ")
        message_parts.remove(message_parts[0])
        text = " ".join(message_parts)
        decode_text = decode(bin_txt=text)
        await msg.edit_text("üîê –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...")
        await asyncio.sleep(1)
        await msg.edit_text(
            f"üîì –¢–µ–∫—Å—Ç –±—ã–ª —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω.\n<blockquote><code>{decode_text}</code></blockquote>",
            parse_mode="html",
        )
    except Exception as e:
        await msg.edit_text(
            f"–ù–∞ —ç—Ç–∞–ø–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø–æ—è–≤–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞..\n\n<code>error: {e}</code>.\n\n–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –ø—ã—Ç–∞–ª—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç? –ï—Å–ª–∏ –¥–∞, –∏—Å–ø–æ–ª—å–∑—É–π /encode",
            parse_mode="html",
        )

@router.message(Command("encode"))
async def encode_cmd(message: Message):
    """Handler for the /encode command
    
    Encodes text to binary format
    """
    try:
        msg = await message.reply("üîì –ò–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞..")
        await asyncio.sleep(2)
        message_text = str(message.text)
        message_parts = message_text.split(" ")
        message_parts.remove(message_parts[0])
        text = " ".join(message_parts)
        encoded_text = encode(text)
        await msg.edit_text("üîê –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...")
        await asyncio.sleep(1)
        await msg.edit_text(
            f"üîí –¢–µ–∫—Å—Ç –±—ã–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω.\n<pre><code class='language-Binary code'>{encoded_text}</code></pre>\n<i>–ù–∞–∂–∞—Ç—å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</i>",
            parse_mode="html",
        )
    except Exception as e:
        await msg.edit_text(
            f"–ù–∞ —ç—Ç–∞–ø–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø–æ—è–≤–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞..\n<code>error: {e}</code>",
            parse_mode="HTML",
        )